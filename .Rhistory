corelations
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory) >= threshold
for (i in 1:332) {
filename <- paste(c(sprintf("%03d", i), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory) >= threshold
for (i in 1:nraw(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory) >= threshold
for (i in 1:nrow(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory) >= threshold
thres
for (i in 1:nrow(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory) >= threshold
print(thres)
for (i in 1:nrow(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
thres <- complete(directory)$nobs >= threshold
print(thres)
for (i in 1:nrow(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
print(id)
for (i in 1:nrow(thres)) {
filename <- paste(c(sprintf("%03d", thres[i,1]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate[!is.na(file$sulfate)], file$nitrate[!is.na(file$nitrate)]))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
file <- file[complete.cases(file)]
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
file <- file[,complete.cases(file)]
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
file <- read.csv(fullpath)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corelations <- c()
frame <- complete(directory)
thres <- frame$nobs >= threshold
id <- frame$id[thres]
for (i in seq_along(id)) {
filename <- paste(c(sprintf("%03d", id[i]), ".csv"), collapse="");
fullpath <- paste(c(".", directory, filename), collapse="/")
file <- read.csv(fullpath)
file <- file[complete.cases(file),]
corelations <- c(corelations, cor(file$sulfate, file$nitrate))
}
corelations
}
cr <- corr("specdata", 150)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("oauth2")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "6c4b690d00b28c9b511f7ce785678124baf8d963")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
clear
clean
clean()
clear()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
GITHUB_CONSUMER_SECRET <- "6e0068c0031947f67ec9cfd19544e9b5d4a696df"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
GITHUB_CONSUMER_SECRET <- "6e0068c0031947f67ec9cfd19544e9b5d4a696df"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("R Stat Test", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
GITHUB_CONSUMER_SECRET <- 6e0068c0031947f67ec9cfd19544e9b5d4a696df
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
GITHUB_CONSUMER_SECRET <- "6e0068c0031947f67ec9cfd19544e9b5d4a696df"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
GITHUB_CONSUMER_SECRET <- "6e0068c0031947f67ec9cfd19544e9b5d4a696df"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "83e47d5c007a85063b5b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
myapp = oauth_app("github")
library(httr)
myapp <- oauth_app("github", key="83e47d5c007a85063b5b", secret="6e0068c0031947f67ec9cfd19544e9b5d4a696df")
token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("~/Documents/ProgrammingAssignment2")
?matrix
## Cached calculation of the matrix inverse. makeCacheMatrix() - builder function to create the data container.
## cacheSolve - main function for calculating the inverse of the matrix
## create and return the data container for the given matrix 'x'
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL ## create an empty variable for inverse
set <- function(y) { ## declare matrix set function
x <<- y ## save matrix
inv <<- NULL ## create an empty variable for inverse
}
get <- function() { ## declare matrix get function
x ## return given matrix
}
setinverse <- function(inverse) { ## declare set inverse cache function
inv <<- inverse ## save inverse in the container
}
getinverse <- function() { ## declare get inverse cache function
inv ## return current inversed matrix or NULL if not set yet
}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse) ## create and return data container
}
## calculate the inverse of the matrix or if it have been already calculated - return the cached value
## 'x' should be the result of the makeCacheMatrix() function
cacheSolve <- function(x, ...) {
inv <- x$getinverse() ## get current inverse cache value
if (!is.null(inv)) { ## check did we already store the inverse
return(inv) ## if we have cache - return the value and exit the function
}
data <- x$get ## get the given matrix
inv <- solve(data) ## calculate the inverse
x$setinverse(inv) ## save the inverse in the data container
inv ## Return a matrix that is the inverse of 'x'
}
x <- matrix(1:4, 3:8)
x
x <- matrix(1:10, c(2,5))
x
x <- matrix(1:9, c(3,3))
x
matrix <- makeCacheMatrix(x)
cacheSolve(matrix)
traceback()
matrix
matrix$get
matrix$get()
## Cached calculation of the matrix inverse. makeCacheMatrix() - builder function to create the data container.
## cacheSolve - main function for calculating the inverse of the matrix
## create and return the data container for the given matrix 'x'
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL ## create an empty variable for inverse
set <- function(y) { ## declare matrix set function
x <<- y ## save matrix
inv <<- NULL ## create an empty variable for inverse
}
get <- function() { ## declare matrix get function
x ## return given matrix
}
setinverse <- function(inverse) { ## declare set inverse cache function
inv <<- inverse ## save inverse in the container
}
getinverse <- function() { ## declare get inverse cache function
inv ## return current inversed matrix or NULL if not set yet
}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse) ## create and return data container
}
## calculate the inverse of the matrix or if it have been already calculated - return the cached value
## 'x' should be the result of the makeCacheMatrix() function
cacheSolve <- function(x, ...) {
inv <- x$getinverse() ## get current inverse cache value
if (!is.null(inv)) { ## check did we already store the inverse
return(inv) ## if we have cache - return the value and exit the function
}
data <- x$get() ## get the given matrix
inv <- solve(data) ## calculate the inverse
x$setinverse(inv) ## save the inverse in the data container
inv ## Return a matrix that is the inverse of 'x'
}
matrix
cacheSolve(matrix)
x <- matrix(rep(0,9), c(3,3))
x
matrix <- makeCacheMatrix(x)
cacheSolve(matrix)
traceback()
x
solve(x)
